/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Employees_info;

import db_connection.db_connection;
import java.awt.Color;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Vector;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import manager.manager_frame;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author user
 */
public class emplyeeInfo_frame extends javax.swing.JFrame {

    /**
     * Creates new form emplyeeInfo_frame
     */
    Connection con;
            db_connection c= new db_connection();
            
    public emplyeeInfo_frame() {
        initComponents();
        con= c.connect();

            try {

                String selectedColoumns = "employee_id,name,role,phone,address,gender,sallary";

                PreparedStatement stmt = con.prepareStatement(
                        String.format("select %s from employee inner join emp_phone "
                                + "on employee.employee_id = emp_phone.id inner join emp_address "
                                + "on employee.employee_id = emp_address.id",selectedColoumns));

                ResultSet resultSet = stmt.executeQuery();
                
                EmployeeInfo.setModel(DbUtils.resultSetToTableModel(resultSet));

            } catch (SQLException ex) {
                System.out.println(ex);
            }
        displayAllEmployees.setVisible(true);
        addNewEmployee.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addNewEmployee = new javax.swing.JPanel();
        employeeName = new javax.swing.JLabel();
        employeeName1 = new javax.swing.JLabel();
        employeeName2 = new javax.swing.JLabel();
        employeeName3 = new javax.swing.JLabel();
        employeeName4 = new javax.swing.JLabel();
        employeeName5 = new javax.swing.JLabel();
        employeeName6 = new javax.swing.JLabel();
        employeeNameField = new javax.swing.JTextField();
        employeePhoneField = new javax.swing.JTextField();
        employeeAddressField = new javax.swing.JTextField();
        employeeSallaryField = new javax.swing.JTextField();
        employeePasswordField = new javax.swing.JPasswordField();
        employeeRoleComboBox = new javax.swing.JComboBox<>();
        genderComboBox = new javax.swing.JComboBox<>();
        addEmployeeButton = new javax.swing.JButton();
        backtoEmployeesDataButton = new javax.swing.JButton();
        displayAllEmployees = new javax.swing.JPanel();
        panelGradient1 = new Employees_info.PanelGradient();
        SalaryLabel = new javax.swing.JLabel();
        AddressLabel = new javax.swing.JLabel();
        PhoneLabel = new javax.swing.JLabel();
        RoleLabel = new javax.swing.JLabel();
        NameLabel = new javax.swing.JLabel();
        AddressField = new javax.swing.JTextField();
        NameField = new javax.swing.JTextField();
        RoleField = new javax.swing.JTextField();
        PhoneField = new javax.swing.JTextField();
        SalaryField = new javax.swing.JTextField();
        deleteEmployeeButton = new javax.swing.JButton();
        updateInfo = new javax.swing.JButton();
        BackButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        searchType = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        searchLabel = new javax.swing.JLabel();
        panelGradient2 = new cashier.PanelGradient();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        EmployeeInfo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 250, 244));

        addNewEmployee.setBackground(new java.awt.Color(12, 19, 79));

        employeeName.setForeground(new java.awt.Color(255, 250, 244));
        employeeName.setText("Employee Name");

        employeeName1.setForeground(new java.awt.Color(255, 250, 244));
        employeeName1.setText("Employee Address");

        employeeName2.setForeground(new java.awt.Color(255, 250, 244));
        employeeName2.setText("Employee Phone");

        employeeName3.setForeground(new java.awt.Color(255, 250, 244));
        employeeName3.setText("Employee Role");

        employeeName4.setForeground(new java.awt.Color(255, 250, 244));
        employeeName4.setText("Employee Gender");

        employeeName5.setForeground(new java.awt.Color(255, 250, 244));
        employeeName5.setText("Employee Password");

        employeeName6.setForeground(new java.awt.Color(255, 250, 244));
        employeeName6.setText("Employee Sallary");

        employeeRoleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manager", "Stock Manger", "Cashier" }));

        genderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "male", "female" }));

        addEmployeeButton.setText("Add Employee");
        addEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeButtonActionPerformed(evt);
            }
        });

        backtoEmployeesDataButton.setText("Back");
        backtoEmployeesDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backtoEmployeesDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addNewEmployeeLayout = new javax.swing.GroupLayout(addNewEmployee);
        addNewEmployee.setLayout(addNewEmployeeLayout);
        addNewEmployeeLayout.setHorizontalGroup(
            addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewEmployeeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeeName)
                    .addComponent(employeeName6)
                    .addComponent(employeeName5)
                    .addComponent(employeeName3)
                    .addComponent(employeeName4)
                    .addComponent(employeeName1)
                    .addComponent(employeeName2))
                .addGap(37, 37, 37)
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(employeePhoneField)
                    .addComponent(employeeAddressField)
                    .addComponent(employeeSallaryField)
                    .addComponent(employeeNameField)
                    .addComponent(employeePasswordField)
                    .addComponent(employeeRoleComboBox, 0, 190, Short.MAX_VALUE)
                    .addComponent(genderComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(141, 141, 141)
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addEmployeeButton)
                    .addComponent(backtoEmployeesDataButton))
                .addContainerGap(438, Short.MAX_VALUE))
        );
        addNewEmployeeLayout.setVerticalGroup(
            addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewEmployeeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addEmployeeButton))
                .addGap(18, 18, 18)
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeName2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeePhoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backtoEmployeesDataButton))
                .addGap(29, 29, 29)
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeName1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeName4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(genderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeName3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeRoleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeName5, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeePasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addNewEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeName6, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeSallaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        displayAllEmployees.setBackground(new java.awt.Color(12, 19, 79));
        displayAllEmployees.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelGradient1.setBackground(new java.awt.Color(0, 159, 253));
        panelGradient1.setForeground(new java.awt.Color(42, 42, 114));
        panelGradient1.setColorGradient(new java.awt.Color(42, 42, 114));

        SalaryLabel.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        SalaryLabel.setForeground(new java.awt.Color(255, 255, 255));
        SalaryLabel.setText("Salary");
        panelGradient1.add(SalaryLabel);
        SalaryLabel.setBounds(660, 250, 85, 28);

        AddressLabel.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        AddressLabel.setForeground(new java.awt.Color(255, 255, 255));
        AddressLabel.setText("Address");
        panelGradient1.add(AddressLabel);
        AddressLabel.setBounds(660, 210, 100, 28);

        PhoneLabel.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        PhoneLabel.setForeground(new java.awt.Color(255, 255, 255));
        PhoneLabel.setText("Phone");
        panelGradient1.add(PhoneLabel);
        PhoneLabel.setBounds(660, 170, 70, 28);

        RoleLabel.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        RoleLabel.setForeground(new java.awt.Color(255, 255, 255));
        RoleLabel.setText("Role");
        panelGradient1.add(RoleLabel);
        RoleLabel.setBounds(660, 130, 60, 28);

        NameLabel.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        NameLabel.setForeground(new java.awt.Color(255, 255, 255));
        NameLabel.setText("Name");
        panelGradient1.add(NameLabel);
        NameLabel.setBounds(660, 90, 78, 28);

        AddressField.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        panelGradient1.add(AddressField);
        AddressField.setBounds(740, 210, 230, 30);

        NameField.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        panelGradient1.add(NameField);
        NameField.setBounds(740, 90, 230, 30);

        RoleField.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        panelGradient1.add(RoleField);
        RoleField.setBounds(740, 130, 230, 30);

        PhoneField.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        panelGradient1.add(PhoneField);
        PhoneField.setBounds(740, 170, 230, 30);

        SalaryField.setFont(new java.awt.Font("Sitka Text", 1, 18)); // NOI18N
        panelGradient1.add(SalaryField);
        SalaryField.setBounds(740, 250, 230, 30);

        deleteEmployeeButton.setFont(new java.awt.Font("Segoe UI Black", 1, 15)); // NOI18N
        deleteEmployeeButton.setText("Delete Employee");
        deleteEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeButtonActionPerformed(evt);
            }
        });
        panelGradient1.add(deleteEmployeeButton);
        deleteEmployeeButton.setBounds(820, 310, 180, 30);

        updateInfo.setFont(new java.awt.Font("Segoe UI Black", 1, 15)); // NOI18N
        updateInfo.setText("Update Info");
        updateInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateInfoActionPerformed(evt);
            }
        });
        panelGradient1.add(updateInfo);
        updateInfo.setBounds(660, 310, 142, 30);

        BackButton.setFont(new java.awt.Font("Segoe UI Black", 1, 18)); // NOI18N
        BackButton.setText("Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        panelGradient1.add(BackButton);
        BackButton.setBounds(820, 420, 180, 50);

        searchButton.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        panelGradient1.add(searchButton);
        searchButton.setBounds(410, 20, 110, 28);

        searchType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "id", "name", "phone", "role" }));
        panelGradient1.add(searchType);
        searchType.setBounds(320, 20, 72, 22);

        searchField.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        panelGradient1.add(searchField);
        searchField.setBounds(100, 20, 190, 28);

        searchLabel.setFont(new java.awt.Font("Yu Gothic UI", 1, 22)); // NOI18N
        searchLabel.setForeground(new java.awt.Color(255, 250, 244));
        searchLabel.setText("search");
        panelGradient1.add(searchLabel);
        searchLabel.setBounds(20, 7, 70, 40);

        panelGradient2.setBackground(new java.awt.Color(0, 159, 253));
        panelGradient2.setColorGradient(new java.awt.Color(42, 42, 114));
        panelGradient2.setRadius(40);

        jLabel7.setFont(new java.awt.Font("Gilroy ExtraBold", 3, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("ADD Employee");
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel7MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel7MousePressed(evt);
            }
        });
        panelGradient2.add(jLabel7);
        jLabel7.setBounds(20, 0, 230, 40);

        panelGradient1.add(panelGradient2);
        panelGradient2.setBounds(30, 430, 250, 40);

        EmployeeInfo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(212, 173, 252)));
        EmployeeInfo.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        EmployeeInfo.setForeground(new java.awt.Color(255, 255, 255));
        EmployeeInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee_id", "name", "role", "phone", "address", "gender", "sallary"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EmployeeInfo.getTableHeader().setReorderingAllowed(false);
        EmployeeInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EmployeeInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(EmployeeInfo);
        if (EmployeeInfo.getColumnModel().getColumnCount() > 0) {
            EmployeeInfo.getColumnModel().getColumn(0).setResizable(false);
            EmployeeInfo.getColumnModel().getColumn(1).setResizable(false);
            EmployeeInfo.getColumnModel().getColumn(2).setResizable(false);
            EmployeeInfo.getColumnModel().getColumn(3).setResizable(false);
            EmployeeInfo.getColumnModel().getColumn(4).setResizable(false);
            EmployeeInfo.getColumnModel().getColumn(5).setResizable(false);
            EmployeeInfo.getColumnModel().getColumn(6).setResizable(false);
        }

        panelGradient1.add(jScrollPane1);
        jScrollPane1.setBounds(0, 70, 650, 360);

        displayAllEmployees.add(panelGradient1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 1020, 490));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(displayAllEmployees, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(addNewEmployee, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(displayAllEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(addNewEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // TODO add your handling code here:
        if("".equals(searchField.getText().trim()))
        {
            JOptionPane.showMessageDialog(this, "Enter a value");
        }
        else
        {

            try {
                String s;
                switch (searchType.getSelectedIndex()) {
                    case 1 ->  s = "name";
                    case 2 ->  s = "phone";
                    case 3 ->  s = "role";
                    default -> s = "employee_id"; 
                }

                String selectedColoumns = "employee_id,name,role,phone,address,gender,sallary";

                PreparedStatement stmt = con.prepareStatement(
                        String.format("select %s from employee inner join emp_phone "
                                + "on employee.employee_id = emp_phone.id inner join emp_address "
                                + "on employee.employee_id = emp_address.id where %s = ?",selectedColoumns,s));
                
                stmt.setString(1, searchField.getText().trim());

                ResultSet resultSet = stmt.executeQuery();
                
                
                EmployeeInfo.setModel(DbUtils.resultSetToTableModel(resultSet));

            } catch (SQLException ex) {
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        manager_frame mangerFrame=new manager_frame();
        mangerFrame.setVisible(true);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void EmployeeInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EmployeeInfoMouseClicked
        // TODO add your handling code here:
        int row =        EmployeeInfo.getSelectedRow();
        String name =    EmployeeInfo.getValueAt(row, 1).toString();
        String role =    EmployeeInfo.getValueAt(row, 2).toString();
        String phone =   EmployeeInfo.getValueAt(row, 3).toString();
        String address = EmployeeInfo.getValueAt(row, 4).toString();
        String salary =  EmployeeInfo.getValueAt(row, 6).toString();
        
        NameField.setText(name);
        RoleField.setText(role);
        PhoneField.setText(phone);
        AddressField.setText(address);
        SalaryField.setText(salary);
        
    }//GEN-LAST:event_EmployeeInfoMouseClicked

    private void updateInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateInfoActionPerformed
        // TODO add your handling code here:
        if(EmployeeInfo.getSelectionModel().isSelectionEmpty())
        {
            JOptionPane.showMessageDialog(this, "Choose an Employee");
        }
        else
        {
            int row =        EmployeeInfo.getSelectedRow();
            String id =      EmployeeInfo.getValueAt(row, 0).toString();
            String name =    NameField.getText();
            String role =    RoleField.getText();
            String  phone =  PhoneField.getText();
            String address = AddressField.getText();
            float sallary =  Float.parseFloat(SalaryField.getText());

            if(NameField.getText().isEmpty()||RoleField.getText().isEmpty()||PhoneField.getText().isEmpty()||
                    AddressField.getText().isEmpty()||SalaryField.getText().isEmpty())
            {
                JOptionPane.showMessageDialog(this, "Enter all the fields");
            }
            else if(PhoneField.getText().length() != 11 || !PhoneField.getText().startsWith("01")
                    || PhoneField.getText().contains("[a-zA-Z]+"))
            {
                JOptionPane.showMessageDialog(this, "Enter valid phone number");
            }
            else
            {
                try{
                    PreparedStatement stmt = con.prepareStatement("BEGIN TRANSACTION;"
                                                                    +"DECLARE @emp_id INT = ?; "
                                                                    +"UPDATE employee SET name = ?,role = ?,sallary = ? WHERE employee.employee_id = @emp_id; "
                                                                    +"Update emp_phone SET phone = ? where id =@emp_id;" 
                                                                    +"Update emp_address SET address = ? where id =@emp_id; "
                                                                    + "COMMIT TRANSACTION;");
                        stmt.setString(1, id);
                        stmt.setString(2, name);
                        stmt.setString(3, role);
                        stmt.setFloat(4, sallary);
                        stmt.setString(5, phone);
                        stmt.setString(6, address);
                        stmt.executeQuery();
                }
                catch (SQLException ex) {
                        System.out.println(ex);
                }

                try 
                {
                    String selectedColoumns = "employee_id,name,role,phone,address,gender,sallary";

                    PreparedStatement stmt = con.prepareStatement(
                            String.format("select %s from employee inner join emp_phone "
                                        + "on employee.employee_id = emp_phone.id inner join emp_address "
                                        + "on employee.employee_id = emp_address.id",selectedColoumns));

                    ResultSet resultSet = stmt.executeQuery();

                    EmployeeInfo.setModel(DbUtils.resultSetToTableModel(resultSet));

                } 
                catch (SQLException ex) {
                    System.out.println(ex);
                }
            }
        }
    
    }//GEN-LAST:event_updateInfoActionPerformed

    private void addEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeButtonActionPerformed
        // TODO add your handling code here:
        String employeeAddress = employeeAddressField.getText();
        if(employeeNameField.getText().isEmpty()||employeePhoneField.getText().isEmpty()||employeeAddressField.getText().isEmpty()||
                employeePasswordField.getPassword().length == 0||employeeSallaryField.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Enter all the fields");
        }
        else if(employeePhoneField.getText().length() != 11 || !employeePhoneField.getText().startsWith("01")
                || employeePhoneField.getText().contains("[a-zA-Z]+"))
        {
            JOptionPane.showMessageDialog(this, "Enter valid phone number");
        }
        else
        {
            String EmployeeNameField = employeeNameField.getText(),
               employeePhone = employeePhoneField.getText(),
               //employeeAddress = employeeAddressField.getText(),
               employeeGender = genderComboBox.getSelectedItem().toString(),
               EmployeePassword = new String (employeePasswordField.getPassword()),
               employeeSallary = employeeSallaryField.getText(),
               EmployeeRole = employeeRoleComboBox.getSelectedItem().toString();
        
            PreparedStatement stmt;
            try {

                stmt = con.prepareStatement("Select *"
                        + "from employee inner join emp_phone "
                        + "on employee.employee_id = emp_phone.id inner join emp_address "
                        + "on employee.employee_id = emp_address.id where phone = ?");
                stmt.setString(1, employeePhone);

                ResultSet resultSet= stmt.executeQuery();

                if(resultSet.next() == true)
                {
                    JOptionPane.showMessageDialog(this, "User already exist the phone number is saved in the database");
                }
                else
                {
                    stmt = con.prepareStatement("DECLARE @ids TABLE (id INT);\n" +
                                                "\n" +
                                                "INSERT INTO employee (name, gender, role, password, sallary)\n" +
                                                "OUTPUT inserted.employee_id INTO @ids\n" +
                                                "VALUES (?,?,?,?,?);\n" +
                                                "\n" +
                                                "DECLARE @emp_id INT = (SELECT TOP 1 id FROM @ids);\n" +
                                                "\n" +
                                                "INSERT INTO emp_phone (id, phone)\n" +
                                                "OUTPUT inserted.id INTO @ids\n" +
                                                "VALUES (@emp_id,?);\n" +
                                                "\n" +
                                                "DECLARE @phone_id INT = (SELECT TOP 1 id FROM @ids);\n" +
                                                "\n" +
                                                "INSERT INTO emp_address (id, address)\n" +
                                                "VALUES (@emp_id,?);");
                    stmt.setString(1, EmployeeNameField);
                    stmt.setString(2, employeeGender);
                    stmt.setString(3, EmployeeRole);
                    stmt.setString(4, EmployeePassword);
                    stmt.setFloat(5, Float.parseFloat(employeeSallary));
                    stmt.setString(6, employeePhone);
                    stmt.setString(7, employeeAddress);

                    stmt.executeQuery();
                    
                } 
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "User added successfully");
                try {

                        String selectedColoumns = "employee_id,name,role,phone,address,gender,sallary";

                        stmt = con.prepareStatement(
                                String.format("select %s from employee inner join emp_phone "
                                        + "on employee.employee_id = emp_phone.id inner join emp_address "
                                        + "on employee.employee_id = emp_address.id",selectedColoumns));

                        ResultSet resultSet = stmt.executeQuery();

                        EmployeeInfo.setModel(DbUtils.resultSetToTableModel(resultSet));

                } catch (SQLException ex1) {
                }
                displayAllEmployees.setVisible(true);
                addNewEmployee.setVisible(false);
                employeeNameField.setText("");
                employeePhoneField.setText("");
                employeeAddressField.setText("");
                genderComboBox.setSelectedIndex(0);
                employeePasswordField.setText("");
                employeeSallaryField.setText("");
                employeeRoleComboBox.setSelectedIndex(0);
            } 
            
        }
                       
    }//GEN-LAST:event_addEmployeeButtonActionPerformed

    private void backtoEmployeesDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backtoEmployeesDataButtonActionPerformed
        // TODO add your handling code here:
        displayAllEmployees.setVisible(true);
        addNewEmployee.setVisible(false);
        
        employeeNameField.setText("");
        employeePhoneField.setText("");
        employeeAddressField.setText("");
        genderComboBox.setSelectedIndex(0);
        employeePasswordField.setText("");
        employeeSallaryField.setText("");
        employeeRoleComboBox.setSelectedIndex(0);
        
        PreparedStatement stmt;
        try {

                        String selectedColoumns = "employee_id,name,role,phone,address,gender,sallary";

                        stmt = con.prepareStatement(
                                String.format("select %s from employee inner join emp_phone "
                                        + "on employee.employee_id = emp_phone.id inner join emp_address "
                                        + "on employee.employee_id = emp_address.id",selectedColoumns));

                        ResultSet resultSet = stmt.executeQuery();

                        EmployeeInfo.setModel(DbUtils.resultSetToTableModel(resultSet));

        } catch (SQLException ex1) {
        }
    }//GEN-LAST:event_backtoEmployeesDataButtonActionPerformed

    private void deleteEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeButtonActionPerformed
        // TODO add your handling code here:
        int row =        EmployeeInfo.getSelectedRow();
        
        if(row >= 0)
        {
            String id =      EmployeeInfo.getValueAt(row, 0).toString();
            try{
                PreparedStatement stmt = con.prepareStatement("BEGIN TRANSACTION;\n" +
                                                            "DECLARE @empID INT = ?;\n" +
                                                            "Delete from emp_phone where id = @empID;\n" +
                                                            "Delete from emp_address where id = @empID;\n" +
                                                            "Delete from employee where employee_id = @empID;\n" +
                                                            "COMMIT TRANSACTION;");

                    stmt.setString(1, id);
                    stmt.executeQuery();
                    System.out.print("HERE");
            }catch (SQLException ex) {
                    System.out.println(ex);
            }  
            try {

                String selectedColoumns = "employee_id,name,role,phone,address,gender,sallary";

                PreparedStatement stmt = con.prepareStatement(
                        String.format("select %s from employee inner join emp_phone "
                                + "on employee.employee_id = emp_phone.id inner join emp_address "
                                + "on employee.employee_id = emp_address.id",selectedColoumns));

                ResultSet resultSet = stmt.executeQuery();

                EmployeeInfo.setModel(DbUtils.resultSetToTableModel(resultSet));

            } catch (SQLException ex) {
                System.out.println(ex);
            }
        }
  
    }//GEN-LAST:event_deleteEmployeeButtonActionPerformed

    private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseEntered
        jLabel7.setForeground(Color.white);
    }//GEN-LAST:event_jLabel7MouseEntered

    private void jLabel7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseExited
        jLabel7.setForeground(Color.CYAN);
    }//GEN-LAST:event_jLabel7MouseExited

    private void jLabel7MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MousePressed
      displayAllEmployees.setVisible(false);
        NewEmpFrame n=new NewEmpFrame();
n.setVisible(true);
    }//GEN-LAST:event_jLabel7MousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(emplyeeInfo_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(emplyeeInfo_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(emplyeeInfo_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(emplyeeInfo_frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new emplyeeInfo_frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField AddressField;
    private javax.swing.JLabel AddressLabel;
    private javax.swing.JButton BackButton;
    private javax.swing.JTable EmployeeInfo;
    private javax.swing.JTextField NameField;
    private javax.swing.JLabel NameLabel;
    private javax.swing.JTextField PhoneField;
    private javax.swing.JLabel PhoneLabel;
    private javax.swing.JTextField RoleField;
    private javax.swing.JLabel RoleLabel;
    private javax.swing.JTextField SalaryField;
    private javax.swing.JLabel SalaryLabel;
    private javax.swing.JButton addEmployeeButton;
    private javax.swing.JPanel addNewEmployee;
    private javax.swing.JButton backtoEmployeesDataButton;
    private javax.swing.JButton deleteEmployeeButton;
    private javax.swing.JPanel displayAllEmployees;
    private javax.swing.JTextField employeeAddressField;
    private javax.swing.JLabel employeeName;
    private javax.swing.JLabel employeeName1;
    private javax.swing.JLabel employeeName2;
    private javax.swing.JLabel employeeName3;
    private javax.swing.JLabel employeeName4;
    private javax.swing.JLabel employeeName5;
    private javax.swing.JLabel employeeName6;
    private javax.swing.JTextField employeeNameField;
    private javax.swing.JPasswordField employeePasswordField;
    private javax.swing.JTextField employeePhoneField;
    private javax.swing.JComboBox<String> employeeRoleComboBox;
    private javax.swing.JTextField employeeSallaryField;
    private javax.swing.JComboBox<String> genderComboBox;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private Employees_info.PanelGradient panelGradient1;
    private cashier.PanelGradient panelGradient2;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JComboBox<String> searchType;
    private javax.swing.JButton updateInfo;
    // End of variables declaration//GEN-END:variables
}
