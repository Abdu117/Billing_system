/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Bill;

import db_connection.db_connection;

import static java.lang.Integer.parseInt;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
import static billing_system_project.login.get_cashier_id;
import Products.manager_products_frame;
import cashier.ViewCustomersFrame;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Amr
 */
public class order_items extends javax.swing.JFrame {

    //int cashier_id = get_cashier_id();
    int cashier_id = get_cashier_id();
    int customer_id = ViewCustomersFrame.getID();

    public void Table_Content() {
        
    }

    /**
     * Creates new form order_items
     */
    public order_items() {
        initComponents();
        fetch_products();
        
    }
    public int getOrderID()
    {
        ResultSet rs = null;
        int orderID = 0;
        try {
            db_connection c = new db_connection();
            conn = c.connect();
            PreparedStatement stmt = conn.prepareStatement("Insert Into orders (customer_id,cashier_id) output inserted.order_id values(?,?)");
            stmt.setInt(1, customer_id);
            stmt.setInt(2, cashier_id);
            rs = stmt.executeQuery();
            rs.next();
            //System.out.println("HERE");
            orderID = Integer.parseInt(rs.getString("order_id"));
            //System.out.println(orderID);
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        return orderID;
    }
    public void fetch_products(){

        try {

            db_connection c = new db_connection();
            Connection conn = c.connect();
            String query = "SELECT product_id as Id,name as Name,price AS Price,discount AS Discount,quantity AS Quantity,brand_name AS Brand,category_name AS Category FROM  products,brands,categories "
                    + "where categories.id=products.category_id and brands.id = products.brand_id";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            ProductsTable.setModel(DbUtils.resultSetToTableModel(rs));
            conn.close();
            stmt.close();
        } catch (SQLException ee) {
            ee.getMessage();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ProductsTable = new javax.swing.JTable();
        searchLabel = new javax.swing.JLabel();
        search_TextField = new javax.swing.JTextField();
        find_Button = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        SubmitButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        BillTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        tot = new javax.swing.JLabel();
        distot = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        disc = new javax.swing.JLabel();
        Dis = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Product_id", "Name", "Price", "Discount", "Quantity", "Brand_name", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ProductsTable.getTableHeader().setReorderingAllowed(false);
        ProductsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(ProductsTable);
        if (ProductsTable.getColumnModel().getColumnCount() > 0) {
            ProductsTable.getColumnModel().getColumn(0).setResizable(false);
            ProductsTable.getColumnModel().getColumn(1).setResizable(false);
            ProductsTable.getColumnModel().getColumn(2).setResizable(false);
            ProductsTable.getColumnModel().getColumn(3).setResizable(false);
            ProductsTable.getColumnModel().getColumn(4).setResizable(false);
            ProductsTable.getColumnModel().getColumn(5).setResizable(false);
            ProductsTable.getColumnModel().getColumn(6).setResizable(false);
        }

        searchLabel.setText("Search");

        search_TextField.setToolTipText("product name");

        find_Button.setText("Find");
        find_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_ButtonActionPerformed(evt);
            }
        });

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        SubmitButton.setText("Submit Order");
        SubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitButtonActionPerformed(evt);
            }
        });

        BillTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "product_id", "Name", "Price", "Qunatity", "Discount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        BillTable.getTableHeader().setReorderingAllowed(false);
        BillTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BillTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(BillTable);
        if (BillTable.getColumnModel().getColumnCount() > 0) {
            BillTable.getColumnModel().getColumn(0).setResizable(false);
            BillTable.getColumnModel().getColumn(1).setResizable(false);
            BillTable.getColumnModel().getColumn(2).setResizable(false);
            BillTable.getColumnModel().getColumn(3).setResizable(false);
            BillTable.getColumnModel().getColumn(4).setResizable(false);
        }
        BillTable.getAccessibleContext().setAccessibleDescription("");

        jLabel2.setText("TOTAL:");

        tot.setText("0");

        distot.setText("0");

        jLabel5.setText("Cash:");

        disc.setText("Discount:");

        Dis.setText("0");

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(searchLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(search_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(find_Button))))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RemoveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SubmitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tot, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(disc)
                                .addGap(42, 42, 42)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Dis, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(distot, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(searchLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(search_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(find_Button))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tot))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(disc)
                            .addComponent(Dis))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(distot))
                        .addGap(33, 33, 33))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(RemoveButton)
                        .addGap(18, 18, 18)
                        .addComponent(SubmitButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(20, 20, 20))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BillTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BillTableMouseClicked

    }//GEN-LAST:event_BillTableMouseClicked

    private void SubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitButtonActionPerformed
        
        if(BillTable.getRowCount()>0)
        {
            int index = 0;
            int orderID = getOrderID();
            Connection conn = null;
            PreparedStatement stmt;
            while(index < BillTable.getRowCount())
            {
                int productID = Integer.parseInt(BillTable.getValueAt(index, 0).toString());
                int quantity = Integer.parseInt(BillTable.getValueAt(index, 3).toString());

                db_connection c = new db_connection();
                conn = c.connect();
                try {
                    System.out.println(customer_id);
                    System.out.println(cashier_id);
                    stmt = conn.prepareStatement(
                        """
                        BEGIN TRANSACTION;
                        DECLARE @productID INT = ?;
                        DECLARE @quantityVar INT = ?;
                        DECLARE @orderID INT = ?;
                        Insert into order_items (quantity,order_id,product_id) values (@quantityVar,@orderID,@productID);
                        DECLARE @oldQuantityVar INT = 0;
                        SELECT @oldQuantityVar=quantity FROM products where product_id = @productID;
                        UPDATE products set quantity = (@oldQuantityVar-@quantityVar) where product_id = @productID;
                        COMMIT TRANSACTION;""");

                        stmt.setInt(1, productID);
                        stmt.setInt(2, quantity);
                        stmt.setInt(3, orderID);

                        stmt.execute();

                        System.out.println("SSS");
                    } catch (SQLException ex) {
                        Logger.getLogger(order_items.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    index++;
                }

                JOptionPane.showMessageDialog(null, "The order made successfully order id = "+orderID);

                ViewCustomersFrame cashier = new ViewCustomersFrame();
                cashier.setVisible(true);
                this.setVisible(false);
                try {
                    stmt = conn.prepareStatement("delete from products where quantity = 0");
                } catch (SQLException ex) {
                    Logger.getLogger(order_items.class.getName()).log(Level.SEVERE, null, ex);
                }
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Enter Products");
        }
        

    }//GEN-LAST:event_SubmitButtonActionPerformed

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed

        int row = BillTable.getSelectedRow();
        if(row >= 0)
        {
            int productID = Integer.parseInt(BillTable.getValueAt(row, 0).toString());
            int quantity  = Integer.parseInt(BillTable.getValueAt(row, 3).toString());
            float price  = Float.parseFloat(BillTable.getValueAt(row, 2).toString());
            float discountOfProduct = Float.parseFloat(BillTable.getValueAt(row, 4).toString());

            DefaultTableModel rowToDelete=(DefaultTableModel)BillTable.getModel();
            rowToDelete.removeRow(row);

            int index = 0;
            while(index < ProductsTable.getRowCount())
            {
                if(productID == Integer.parseInt(ProductsTable.getValueAt(index, 0).toString()))
                {
                    break;
                }
                index++;
            }

            int oldQuantity = Integer.parseInt(ProductsTable.getValueAt(index, 4).toString());
            ProductsTable.setValueAt(oldQuantity + quantity, index, 4);

            total -= ((price - discountOfProduct) * quantity);
            System.out.println(price);
            System.out.println((price - discountOfProduct));
            System.out.println((price - discountOfProduct) * quantity);

            float subTotal = total - (total*discount);

            tot.setText(Float.toString(total));
            distot.setText(Float.toString(subTotal));
            Dis.setText(Float.toString(discount));
        }       
    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void find_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_ButtonActionPerformed

        try {
            db_connection c = new db_connection();
            String product_name = search_TextField.getText();
            conn = c.connect();
            String query = "SELECT * FROM  products where name like ? ";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, "%" + product_name + "%");
            ResultSet rs = stmt.executeQuery();
            ProductsTable.setModel(DbUtils.resultSetToTableModel(rs));
            conn.close();
            stmt.close();
        } catch (SQLException ee) {
            ee.getMessage();
        }
    }//GEN-LAST:event_find_ButtonActionPerformed

    float discount = ViewCustomersFrame.getDiscount();
    float total = 0;
    private void ProductsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductsTableMouseClicked
        int row = ProductsTable.getSelectedRow();

        String requestedQuantity = JOptionPane.showInputDialog(null, "Required Quantity");

        if(requestedQuantity == ""  || requestedQuantity == null || Integer.parseInt(requestedQuantity) <=0 )
        {
            JOptionPane.showInternalMessageDialog(null, "Enter a valid Quantity");
        }
        else
        {
            int productID = Integer.parseInt(ProductsTable.getValueAt(row, 0).toString());
            String productName = ProductsTable.getValueAt(row, 1).toString();
            float price = Float.parseFloat(ProductsTable.getValueAt(row, 2).toString());
            int quantity = Integer.parseInt(ProductsTable.getValueAt(row, 4).toString());
            float discountOfProduct = Float.parseFloat(ProductsTable.getValueAt(row, 3).toString());

            if(quantity < Integer.parseInt(requestedQuantity))
            {
                JOptionPane.showInternalMessageDialog(null, "Enter Less Quantity");
            }
            else
            {
                int index = 0;
                while(index < BillTable.getRowCount())
                {
                    if(productID == Integer.parseInt(BillTable.getValueAt(index, 0).toString()))
                    {
                        break;
                    }
                    index++;
                }
                
                if(index >= 0 && index <BillTable.getRowCount())
                {
                    int BillQuantity = Integer.parseInt(BillTable.getValueAt(index, 3).toString());
                    BillTable.setValueAt(BillQuantity + Integer.parseInt(requestedQuantity), index, 3);
                    total += ((price - discountOfProduct) * Integer.parseInt(requestedQuantity));
                }
                else
                {
                    DefaultTableModel newRow;
                    newRow = (DefaultTableModel) BillTable.getModel();
                    newRow.addRow(new Object[]{productID, productName, price, Integer.parseInt(requestedQuantity), discountOfProduct});

                    ProductsTable.setValueAt(quantity - Integer.parseInt(requestedQuantity), row, 4);
                    System.out.println(price - Integer.parseInt(requestedQuantity));
                    total += ((price - discountOfProduct) * Integer.parseInt(requestedQuantity));
                }
                
                float subTotal = total - (total*discount);
                
                tot.setText(Float.toString(total));
                distot.setText(Float.toString(subTotal));
                Dis.setText(Float.toString(discount));
            }

        }

    }//GEN-LAST:event_ProductsTableMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
this.setVisible(false);
ViewCustomersFrame v=new ViewCustomersFrame();
v.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
Connection conn;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(order_items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(order_items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(order_items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(order_items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new order_items().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable BillTable;
    private javax.swing.JLabel Dis;
    private javax.swing.JTable ProductsTable;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SubmitButton;
    private javax.swing.JLabel disc;
    private javax.swing.JLabel distot;
    private javax.swing.JButton find_Button;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField search_TextField;
    private javax.swing.JLabel tot;
    // End of variables declaration//GEN-END:variables

    private int Parseint(String s) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
