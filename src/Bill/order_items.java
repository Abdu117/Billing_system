/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Bill;
import db_connection.db_connection;

import static java.lang.Integer.parseInt;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author Mohamed2
 */

public class order_items extends javax.swing.JFrame {

     public void Table_Content(){
        try{ 
     
     db_connection c= new db_connection();
           
           //ResultSet rs =c.fetch("products");
        
            Connection conn=c.connect();
            String query = "SELECT * FROM  products";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            pt.setModel(DbUtils.resultSetToTableModel(rs));
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
    }
     public int get_order()
     {
         try{ 
     
     db_connection c= new db_connection();
           
           //ResultSet rs =c.fetch("products");
        int cashier_id;
        int customer_id;
            Connection conn=c.connect();
            String query = "INSERT INTO orders (customer_id,cashier_id) OUTPUT inserted.order_idÂ VALUES(2,2)";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            String s=rs.getString(1);
            conn.close();
            stmt.close();
            return Parseint(s);
            
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
         return 0;
     }
     public void Table_Content2(){
        try{ 
     
     db_connection c= new db_connection();
           
           //ResultSet rs =c.fetch("products");
        
            Connection conn=c.connect();
            String query = "SELECT * FROM  products";
            PreparedStatement stmt = conn.prepareStatement(query);
            ResultSet rs = stmt.executeQuery();
            pt1.setModel(DbUtils.resultSetToTableModel(rs));
         conn.close();
         stmt.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
    }
     
             /**
     * Creates new form order_items
     */
    public order_items() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pt = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        search_TextField = new javax.swing.JTextField();
        find_Button = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        pt1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        tot = new javax.swing.JLabel();
        distot = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        disc = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pt.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Product_id", "Name", "Price", "Discount", "Quantity", "Brand_name", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pt.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                ptAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        pt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ptFocusGained(evt);
            }
        });
        pt.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ptMouseClicked(evt);
            }
        });
        pt.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                ptPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(pt);

        jLabel1.setText("Search");

        search_TextField.setToolTipText("product name");

        find_Button.setText("Find");
        find_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_ButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Submit Order");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        pt1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "order_id", "Name", "Price", "Qunatity", "Category"
            }
        ));
        pt1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pt1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(pt1);

        jLabel2.setText("TOTAL:");

        tot.setText("0");

        distot.setText("0");

        jLabel5.setText("TOTAL:");

        disc.setText("Discount 50%:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(search_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(find_Button))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(distot, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tot, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(disc, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(search_TextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(find_Button))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tot))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(disc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(distot))
                        .addGap(33, 33, 33))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ptAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_ptAncestorAdded
        Table_Content();
    }//GEN-LAST:event_ptAncestorAdded

    private void ptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ptFocusGained

    }//GEN-LAST:event_ptFocusGained

    private void ptPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_ptPropertyChange

    }//GEN-LAST:event_ptPropertyChange

    private void find_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_ButtonActionPerformed

        try{

            db_connection c= new db_connection();
            String product_name = search_TextField.getText();
            Connection conn=c.connect();
            String query = "SELECT * FROM  products where name like ? ";
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, "%"+product_name+"%");
            ResultSet rs = stmt.executeQuery();
            pt.setModel(DbUtils.resultSetToTableModel(rs));
            conn.close();
            stmt.close();
        }

        catch (SQLException ee){

            ee.getMessage();
        }
    }//GEN-LAST:event_find_ButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DefaultTableModel row=(DefaultTableModel)pt1.getModel();
        DefaultTableModel model=(DefaultTableModel)pt.getModel();
        try {
            
            if(pt1.getSelectedRow()==1)
            {  int rowIndex=pt.getSelectedRow();
                row.removeRow(pt1.getSelectedRow());
                String p_price=model.getValueAt(rowIndex, 2).toString();
                String p_dis=model.getValueAt(rowIndex, 5).toString();
                double price=Double.parseDouble(p_price);
                x-=parseInt(s);
                sum-=price;

                dis=Double.parseDouble(p_dis);
                calc-=dis*(price/100);
                diastot= sum-dis*(price/100);
                tot.setText(Double.toString(sum));

                disc.setText("Discount"+Double.toString(dis)+" : -" + Double.toString(calc));
                distot.setText(Double.toString(diastot));
                a--;
            }else {
                if(pt1.getSelectedRow()==0)
                {
                    JOptionPane.showMessageDialog(null, "Table is Empyt");
                }else{
                    JOptionPane.showMessageDialog(null,"please select single row for delete");
                }
            }
        
        
        
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        DefaultTableModel row=(DefaultTableModel)pt1.getModel();
            if(row.getRowCount()==0)
            {
                JOptionPane.showMessageDialog(null, "Table is Empty");
            }
            else
            {
                try{ 
     
            db_connection c= new db_connection();
            Connection conn=c.connect();
            String order="INSERT INTO orders (customer_id,cashier_id)OUTPUT inserted.order_id Values(?,?)";
            PreparedStatement stmt1 = conn.prepareStatement(order);
            ResultSet rs = stmt1.executeQuery();
            String orderi="";
            while(rs.next())
            {
                orderi=rs.getString("order_id");
            }
            for(int i=0;i<row.getRowCount();i++)
            {
                String p_name= row.getValueAt(i, 1).toString();
                String p_Quan= row.getValueAt(i, 3).toString();
                String query = "insert into order_item (order_id,product_name,Quantity) values(?,?,?) ";
                PreparedStatement stmt = conn.prepareStatement(query);
                stmt.setString(1, orderi);
                stmt.setString(2, p_name);
                stmt.setString(3, p_Quan);
                stmt.execute();
            }
            JOptionPane.showMessageDialog(null,"Data Inserted Successfully");
            row.setRowCount(0);//clear table after submit
            conn.close();
            stmt1.close();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        }
    
            }
    }//GEN-LAST:event_jButton2ActionPerformed
double sum=0;
double dis=0;
double calc=0;
double diastot=0;
int x=0;
int a=1;
String s;
    private void ptMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ptMouseClicked
//        DefaultTableModel model=(DefaultTableModel)pt.getModel();
//        int rowIndex=pt.getSelectedRow();
//        String p_id=model.getValueAt(rowIndex, 0).toString();
//        String p_Quan =model.getValueAt(rowIndex, 4).toString();
//        
//        try{
//            db_connection c=new db_connection();
//            Connection conn= c.connect() ;
//            String query ="INSERT INTO products values (?,?,?)";
//            PreparedStatement stmt =conn.prepareStatement(query);
//            int order=get_order();
//            s=JOptionPane.showInputDialog(null, "enter the quantity");
//            stmt.setInt(1,Integer.parseUnsignedInt(s) );
//            stmt.setInt(2, order);
//            stmt.setInt(3,Integer.parseUnsignedInt( p_id));
//            stmt.execute();            
//            Table_Content2();
//            JOptionPane.showMessageDialog(this, "Item Added ");
//            conn.close();
//            stmt.close();
//        }
//        
//        catch (SQLException ee){
//            
//            ee.getMessage();
//            System.out.println("error");
//        }

        DefaultTableModel model=(DefaultTableModel)pt.getModel();
        DefaultTableModel row=(DefaultTableModel)pt1.getModel();
        int rowIndex=pt.getSelectedRow();

         s=JOptionPane.showInputDialog(null, "enter the quantity");
        x+=parseInt(s);
       if(parseInt(s)==0)
       {
           JOptionPane.showMessageDialog(null, "Enter Correct Quantity");
       }
       else
       {
        String p_id=model.getValueAt(rowIndex, 0).toString();
        String p_name= model.getValueAt(rowIndex, 1).toString();
        String p_price=model.getValueAt(rowIndex, 2).toString();
        String p_dis=model.getValueAt(rowIndex, 3).toString();
        String p_Quan =model.getValueAt(rowIndex, 4).toString();
        String p_cate=model.getValueAt(rowIndex, 6).toString();

        if(x > parseInt(p_Quan) || parseInt(p_Quan)==0 )
        {
            JOptionPane.showMessageDialog(null,"THERE IS NO QUANTITY");
             try{ 
     
        db_connection c= new db_connection();
            Connection conn=c.connect();
             String query = "update products set Quantity=0 where Name=? ";

             PreparedStatement stmt = conn.prepareStatement(query);
             stmt.setString(1, p_name);
             stmt.execute();
         conn.close();
         stmt.close();
         Table_Content();
            }
            
            catch (SQLException ee){
            
            ee.getMessage();
        
    } 
             x=0;
        }
        else{
          
            
            System.out.println(p_Quan);
             System.out.println(x);
        row.addRow(new Object[]{a , p_name , p_price ,s , p_cate});
        double price=Double.parseDouble(p_price);
        sum+=price;
        dis=Double.parseDouble(p_dis);
        calc+=dis*(price/100);
        diastot= sum-calc;
        tot.setText(Double.toString(sum));
        
        disc.setText("Discount"+Double.toString(dis)+" : -" + Double.toString(calc));
        distot.setText(Double.toString(diastot));
        
            a++;
        }}
    }//GEN-LAST:event_ptMouseClicked
String b;
    private void pt1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pt1MouseClicked
         b=JOptionPane.showInputDialog(null, "Do you want to remove this Row");
        if(b.equalsIgnoreCase("YES")||b.equalsIgnoreCase("Yes")||b.equalsIgnoreCase("yes"))
        {
            DefaultTableModel row=(DefaultTableModel)pt1.getModel();
               DefaultTableModel model=(DefaultTableModel)pt.getModel();
                int rowIndex=pt.getSelectedRow();
                int index=pt1.getSelectedRow();
                String p_price=row.getValueAt(index, 2).toString();
                row.removeRow(pt1.getSelectedRow());
                String p_dis=model.getValueAt(rowIndex, 3).toString();
                double price=Double.parseDouble(p_price);
                x-=parseInt(s);
                System.out.println(sum);
                System.out.println(price);
                sum-=price;

                dis=Double.parseDouble(p_dis);
                calc-=dis*(price/100);
                diastot= sum-calc;
                tot.setText(Double.toString(sum));
                   System.out.println(sum);
                   System.out.println(calc);
                   System.out.println(diastot);
                disc.setText("Discount"+Double.toString(dis)+" : -" + Double.toString(calc));
                distot.setText(Double.toString(diastot));
                a--;
        }
        else
        {
            JOptionPane.showMessageDialog(null, "take care where you clicked");
        }
    }//GEN-LAST:event_pt1MouseClicked
       
                  
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(order_items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(order_items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(order_items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(order_items.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new order_items().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel disc;
    private javax.swing.JLabel distot;
    private javax.swing.JButton find_Button;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable pt;
    private javax.swing.JTable pt1;
    private javax.swing.JTextField search_TextField;
    private javax.swing.JLabel tot;
    // End of variables declaration//GEN-END:variables

    private int Parseint(String s) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
